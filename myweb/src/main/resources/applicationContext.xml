<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.3.xsd ">

	<!-- 配置要扫描的包 -->
	<!-- @Service:用于标注业务层组件 -->
	<!-- @Controller:用于标注控制层组件 -->
	<!-- @Repository:用于标注数据访问组件 -->
	<!-- @Component:泛指组件 -->
	<context:component-scan
		base-package="org.boli.myweb" />

	<!-- 【1】引入属性文件，在配置中占位使用 -->
	<context:property-placeholder
		location="classpath:config.properties,classpath:db/h2/jdbc.properties,classpath:db/mysql/jdbc.properties"
		file-encoding="UTF-8" />

	<!-- 【2】初始化嵌入式数据库H2 -->
	<!-- 嵌入模式(内存)：关闭持久化，用于单元测试、缓存 -->
	<!-- 用"jdbc:h2:mem:dataSource"连接，各进程可用同名数据库，互不影响 -->
	<!-- 必须是同一进程启动的Web Server和Tcp Server才能访问 -->
	<jdbc:embedded-database id="dataSource1"
		type="H2">
		<jdbc:script location="classpath:db/h2/schema.sql"
			encoding="UTF-8" />
		<jdbc:script location="classpath:db/h2/data.sql"
			encoding="UTF-8" />
	</jdbc:embedded-database>
	<!-- 【2】 配置H2数据源，使用C3P0 -->
	<!-- 嵌入模式(文件)：可以同应用程序打包在一起发布， -->
	<!-- 直接用"jdbc:h2:~/myweb"连接，若~/myweb.mv.db存在则锁定后打开，若不存在则新建(进程独占) -->
	<bean id="dataSource2"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${h2.jdbc.driverClass}" />
		<property name="jdbcUrl" value="${h2.jdbc.url}" />
		<property name="user" value="${h2.jdbc.user}" />
		<property name="password" value="${h2.jdbc.password}" />
	</bean>

	<!-- 启动H2的Tcp Server -->
	<!-- 可以使用"jdbc:h2:tcp://localhost:9092/~/myweb"和"jdbc:h2:tcp://localhost:9092/mem:dataSource" -->
	<bean id="h2TcpServer" class="org.h2.tools.Server"
		factory-method="createTcpServer" init-method="start"
		destroy-method="stop" depends-on="h2WebServer">
		<constructor-arg
			value="-tcp,-tcpAllowOthers,-tcpPort,9092" />
	</bean>
	<!-- 启动H2的Web Server -->
	<!-- http://localhost:8082 jdbcUrl sa -->
	<bean id="h2WebServer" class="org.h2.tools.Server"
		factory-method="createWebServer" init-method="start"
		destroy-method="stop">
		<constructor-arg
			value="-web,-webAllowOthers,-webPort,8082" />
	</bean>

	<!-- 【2】 配置mysql数据源，使用C3P0 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 【2】配置mysql数据源，使用DBCP -->
	<bean id="dataSource4"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<!-- 【3】会话工厂bean sqlSessionFactoryBean -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath:org/boli/myweb/mapper/*Mapper.xml" />
		<!-- Mapper文件里面parameterMap可以不用再写包名 -->
		<property name="typeAliasesPackage"
			value="org.boli.myweb.entity" />
	</bean>

	<!-- 【4】自动扫描对象关系映射 -->
	<!-- 自动扫描Mapper接口生成代理注入到Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
		<!-- 指定要自动扫描接口的基础包，实现接口 -->
		<property name="basePackage" value="org.boli.myweb.mapper"></property>
	</bean>

	<!-- 【5】配置事务管理器 -->
	<!-- 将事务管理器作为一个bean配置到spring的容器的 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 事务管理器需要注入一个dataSource -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 【6】定义通知，通知中要处理的就是事务 -->
	<!-- 配置事务的隔离性和传播特性 -->
	<!-- 相当于一个AOP的切面 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<!-- 配置事务的属性定义 -->
		<tx:attributes>
			<!-- 配置具体的方法的事务属性 -->
			<!-- isolation:事务的隔离级别，默认是按数据库的隔离级别来 -->
			<!-- propagation:事务的传播行为，默认是同一个事务 -->
			<!-- timeout="-1":事务的超时时间，默认值使用数据库的超时时间。 -->
			<!-- read-only="false":事务是否只读，默认可读写。 -->
			<!-- rollback-for:遇到哪些异常就回滚，其他的都不回滚 -->
			<!-- no-rollback-for：遇到哪些异常不回滚，其他的都回滚。和上面互斥的 -->
			<!-- 支持通配符 要求service中 方法名字必须符合下面的规则 -->
			<tx:method name="save*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="update*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="query*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 【7】配置切入点，让通知关联切入点，即事务控制业务层的方法 -->
	<aop:config>
		<!-- 切入点 -->
		<!-- execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? 
			name-pattern(param-pattern) throws-pattern?) -->
		<!-- ret-type-pattern,name-pattern(param-pattern)是必须的. -->
		<!-- ret-type-pattern:标识方法的返回值，需要使用全路径的类名如java.lang.String,也可以为*表示任何返回值； -->
		<!-- name-pattern:指定方法名,*代表所有,例如set*,代表以set开头的所有方法. -->
		<!-- param-pattern:指定方法参数(声明的类型),(..)代表所有参数,(*)代表一个参数,(*,String)代表第一个参数为任何值,第二个为String类型. -->
		<aop:pointcut id="txPointcut"
			expression="execution(* org.boli.myweb.service.impl.*.*(..))" />
		<!-- 切面 -->
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointcut" />
	</aop:config>

	<!-- 任务执行器 -->
	<task:executor id="taskExecutor" pool-size="5" />
	<task:annotation-driven executor="taskExecutor" />

</beans>
